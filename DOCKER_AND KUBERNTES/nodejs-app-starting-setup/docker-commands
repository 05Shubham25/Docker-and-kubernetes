docker rm <image ID> --------> to remove container 

docker rmi <image ID> ---------> to remove images

docker image prune -----> to remove unused images

docker container prune -----> to remove unused containers

docker volume prune -----> to remove unused volumes

volume -----> are storage/folder  in your host machine that can be used by containers

docker system prune -----> to remove all unused images, containers, volumes

docker build -t <image name> . --------> to build image from docker file

docker image inspect <image ID> --------> to inspect images

docker run -p 3000:80 -d  --rm feedback-node --------> to run container and map port 3000 to 80 , -d to run in background, --rm to remove container after stopping

docker logs <container ID> --------> to get logs of container

docker logs -f <NAMES>  ----> to get following logs

docker cp dummy/. stoic_khayyam:/test ------> to copy folder/ files from local host machine to running container

docker cp stoic_khayyam:/test dummy  -------> to copy files/folder from running container to local host

docker exec -it <container ID> /bin/bash --------> to get inside container

docker share and pull

docker push IMAGE_NAME --------> to push image to docker hub

docker pull IMAGE_NAME --------> to pull image from docker hub

docker run -p 3000:80 --rm shubham0405/node-hello-world:1.0 --------> to run container and map port 3000 to 80

docker run -d -p 8080:80 --name myapp myapp:1.0 --------> to run container in background and map port 8080 to 80

docker tag IMAGE_NAME shubham0405/node-hello-world:1.0 --------> to tag image


docker volume --help --------> to get help for volume

docker volume ls --------> to list volumes


there are two types of of external Data Storage in Docker
1. Volumes   ------>  managed by Docker
eg Anonymous Volume, Named Volume, Host Volume
2. Bind Mounts   ------>  managed by user
eg Bind Mounts


In data-volume 01-starting-setup, we have created a volume and mounted it to container
initially we would loose data if we remove container but with volume we can persist data
now we are using Volume to persist data
so our data remains even if we remove container.



docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes --------> to run container and map port 3000 to 80, -d to run in background, --rm to remove container after stopping, -v to mount volume, feedback is volume name, feedback-node:volumes is image name


docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v  "C:\Users\Asus\Desktop\DOCKER_AND_KUBERNETES\DOCKER_AND KUBERNTES\nodejs-app-starting-setup\data-volumes-01-starting-setup:/app" feedback-node:volumes --------> to run container and map port 3000 to 80, -d to run in background, --rm to remove container after stopping, -v to mount volume, feedback is volume name, feedback-node:volumes is image name, -v to mount host volume, "C:\Users\Asus\Desktop\DOCKER_AND_KUBERNETES\DOCKER_AND KUBERNTES\nodejs-app-starting-setup\data-volumes-01-starting-setup:/app" is host volume path    